// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql" // or "mysql", "sqlite", etc.
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  email         String   @unique
  name          String?
  phone         String?
  avatar        String?
  role          Role     @default(CUSTOMER)
  emailVerified Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Customer specific fields
  postcode      String?
  address       String?

  // Relations
  bookings      Booking[]
  cleanerProfile CleanerProfile?

  @@map("users")
}

model CleanerProfile {
  id              String   @id @default(cuid())
  userId          String   @unique
  workingPostcode String
  workingRadius   Int      @default(15) // miles
  latitude        Float?
  longitude       Float?
  hourlyRate      Decimal  @db.Decimal(10, 2) @default(15.00)
  isActive        Boolean  @default(true)
  isAvailable     Boolean  @default(true)
  
  // Availability schedule
  availability    CleanerAvailability[]
  
  // Relations
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  assignedBookings Booking[]
  
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  @@map("cleaner_profiles")
}

model CleanerAvailability {
  id          String   @id @default(cuid())
  cleanerId   String
  dayOfWeek   Int      // 0 = Sunday, 1 = Monday, etc.
  startTime   String   // e.g., "09:00"
  endTime     String   // e.g., "17:00"
  isAvailable Boolean  @default(true)
  
  cleaner     CleanerProfile @relation(fields: [cleanerId], references: [id], onDelete: Cascade)
  
  @@unique([cleanerId, dayOfWeek])
  @@map("cleaner_availability")
}

model Postcode {
  id        String   @id @default(cuid())
  postcode  String   @unique
  latitude  Float
  longitude Float
  district  String?
  ward      String?
  county    String?
  country   String   @default("UK")
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("postcodes")
}

model Booking {
  id          String        @id @default(cuid())
  bookingId   String        @unique @default(cuid()) // Public booking reference
  
  // Service details
  serviceType ServiceType
  frequency   Frequency
  
  // Property details
  bedrooms    Int
  bathrooms   Int
  address     String
  postcode    String
  instructions String?
  
  // Date and time
  date        DateTime
  time        String
  estimatedDuration Int @default(120) // minutes
  
  // Pricing
  basePrice   Decimal       @db.Decimal(10, 2)
  extrasPrice Decimal       @db.Decimal(10, 2) @default(0)
  totalPrice  Decimal       @db.Decimal(10, 2)
  
  // Contact info (for guest bookings)
  customerName  String
  customerEmail String
  customerPhone String
  
  // Assignment
  assignedCleanerId String?
  assignedAt       DateTime?
  
  // Status
  status      BookingStatus @default(PENDING)
  
  // Relations
  userId      String?
  user        User?         @relation(fields: [userId], references: [id])
  assignedCleaner CleanerProfile? @relation(fields: [assignedCleanerId], references: [id])
  extras      BookingExtra[]
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("bookings")
}

model Extra {
  id          String         @id @default(cuid())
  name        String
  description String?
  price       Decimal        @db.Decimal(10, 2)
  active      Boolean        @default(true)
  
  // Relations
  bookings    BookingExtra[]
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("extras")
}

model BookingExtra {
  id        String  @id @default(cuid())
  bookingId String
  extraId   String
  
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  extra     Extra   @relation(fields: [extraId], references: [id])
  
  @@unique([bookingId, extraId])
  @@map("booking_extras")
}

enum Role {
  CUSTOMER
  CLEANER
  ADMIN
}

enum ServiceType {
  REGULAR
  DEEP
  TENANCY
  OFFICE
}

enum Frequency {
  ONE_TIME
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  ASSIGNED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}