// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified Boolean   @default(false)
  image         String?
  premium       Boolean   @default(false)
  role          String    @default("user")
  banned        Boolean   @default(false)
  banReason     String?
  banExpires    Int? /// Unix timestamp for ban expiration
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relations
  sessions      Session[]
  accounts      Account[]
  bookings      Booking[]

  @@map("users")
}

model Account {
  id                    String    @id @default(cuid())
  userId                String
  accountId             String
  providerId            String
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("accounts")
}

model Session {
  id             String   @id @default(cuid())
  userId         String
  token          String   @unique
  expiresAt      DateTime
  ipAddress      String?
  userAgent      String?
  impersonatedBy String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Verification {
  id         String   @id @default(cuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verifications")
}

model Booking {
  id          String        @id @default(cuid())
  bookingId   String        @unique @default(cuid()) // Public booking reference
  
  // Service details
  serviceType ServiceType
  frequency   Frequency
  
  // Property details
  bedrooms    Int
  bathrooms   Int
  address     String
  instructions String?
  
  // Date and time
  date        DateTime
  time        String
  
  // Pricing
  basePrice   Decimal       @db.Decimal(10, 2)
  extrasPrice Decimal       @db.Decimal(10, 2) @default(0)
  totalPrice  Decimal       @db.Decimal(10, 2)
  
  // Contact info
  customerName  String
  customerEmail String
  customerPhone String
  
  // Status
  status      BookingStatus @default(PENDING)
  
  // Relations
  userId      String?
  user        User?         @relation(fields: [userId], references: [id], onDelete: SetNull)
  extras      BookingExtra[]
  
  // Timestamps
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("bookings")
}

model Extra {
  id          String         @id @default(cuid())
  name        String
  description String?
  price       Decimal        @db.Decimal(10, 2)
  active      Boolean        @default(true)
  
  // Relations
  bookings    BookingExtra[]
  
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt

  @@map("extras")
}

model BookingExtra {
  id        String  @id @default(cuid())
  bookingId String
  extraId   String
  
  // Relations
  booking   Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  extra     Extra   @relation(fields: [extraId], references: [id], onDelete: Cascade)
  
  @@unique([bookingId, extraId])
  @@map("booking_extras")
}

enum ServiceType {
  REGULAR
  DEEP
  TENANCY
  OFFICE
}

enum Frequency {
  ONE_TIME
  WEEKLY
  BI_WEEKLY
  MONTHLY
}

enum BookingStatus {
  PENDING
  CONFIRMED
  IN_PROGRESS
  COMPLETED
  CANCELLED
}